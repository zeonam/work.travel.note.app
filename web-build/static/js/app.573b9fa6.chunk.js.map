{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","a","async","s","JSON","stringify","AsyncStorage","setItem","getItem","parse","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","btnText","color","TextInput","onSubmitEditing","newToDos","Date","now","onChangeText","payLoad","returnKeyType","value","placeholder","input","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","fontSize","fontWeight","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.573b9fa6.chunk.js","sourcesContent":["export const theme = {\n    bg: \"black\",\n    grey : \"#3A3D40\",\n    toDoBg : \"#5C5C60\"\n};","import { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport { \n  StyleSheet, Text, View, \n  TouchableOpacity, TextInput, ScrollView, Alert, Platform } from 'react-native';\nimport { Fontisto } from '@expo/vector-icons';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { theme } from './colors';\n\nconst STORAGE_KEY = \"@toDos\"\n\nexport default function App() {\n\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  useEffect(() => {\n    loadToDos();\n  }, []);\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n  const onChangeText = (payLoad) => setText(payLoad);\n  const saveToDos = async (toSave) => {\n    const s = JSON.stringify(toSave)\n    await AsyncStorage.setItem(STORAGE_KEY, s)\n  }\n  const loadToDos = async() => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    if(s) {setToDos(JSON.parse(s))}\n    ;\n    \n  }\n  const addToDo = async () => {\n    if(text === \"\"){\n      return;\n    }\n    const newToDos = {\n      ...toDos, \n      [Date.now()] : {text, working }};\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n  const deleteToDo = (key) => {\n    if(Platform.OS === \"web\"){\n      const ok = confirm(\"Do you want to delete this To Do?\")\n      if(ok){\n        const newToDos = {...toDos};\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    }else{\n      Alert.alert(\n        \"Delete to do\", \n        \"Are you sure to delete?\", [\n        {text: \"Cancel\"},\n        {text: \"I'm Sure\",\n         style: \"destructive\",\n          onPress: async () => {\n           const newToDos = {...toDos};\n            delete newToDos[key];\n            setToDos(newToDos);\n            await saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n            <Text style={{...styles.btnText, color: working ? \"white\" : theme.grey}}>Work</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n            <Text style={{...styles.btnText, color: !working ? \"white\" : theme.grey}}>Travel</Text>\n        </TouchableOpacity>\n      </View>\n      \n      <TextInput \n        onSubmitEditing={addToDo}\n        onChangeText={onChangeText}\n        returnKeyType=\"done\"\n        value = {text}\n        placeholder={working ? \"Add a To Do List\": \"Where do you want to go?\"} \n        style={styles.input} \n      />\n      <ScrollView>\n        {\n        Object.keys(toDos).map((key) => (\n          toDos[key].working === working ? \n          <View style={styles.toDo} key={key}>\n            <Text style={styles.toDoText}>{toDos[key].text}</Text>\n            <TouchableOpacity onPress={() => deleteToDo(key)}>\n                <Fontisto name=\"trash\" size={20} color=\"grey\" />\n            </TouchableOpacity>\n          </View> : null\n        ))\n        }\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header:{\n    justifyContent: \"space-between\",\n    flexDirection:\"row\",\n    marginTop: 100,\n\n  },\n  btnText: {\n    fontSize: 38,\n    color: \"white\",\n    fontWeight: \"600\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 10,\n    paddingHorizontal: 10,\n    borderRadius: 20,\n    marginVertical: 20,\n    fontSize: 15,\n  },\n  toDo: {\n    backgroundColor: theme.grey,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n});\n"],"sourceRoot":""}